{"name":"Test-text","tagline":"A module for testing and doing metrics on normal text. As in books or novels. ","body":"Test::Text\r\n=========\r\n[![Build Status](https://travis-ci.org/JJ/Test-Text.svg?branch=master)](https://travis-ci.org/JJ/Test-Text)\r\n\r\nObjective\r\n---\r\n\r\nA module for testing and doing metrics on normal text. As in books or\r\nnovels.  \r\n\r\nWe're not there yet, but for the time being it is a pretty\r\ngood spelling checker that can be used *on the cloud* in continuous\r\nintegration literary environments. \r\n\r\nwho is this module for?\r\n---\r\n\r\nPeople who write fiction or non-fiction using simple text, Markdown or\r\nsimilar formats. You don't need to know Perl or continuous integration\r\nor nothing more techie than clicking here and there and saving\r\nfiles. You probably do, but it's not really needed for using it. \r\n\r\nwhat is this for?\r\n---\r\n\r\nSaves you time by checking spelling automatically. Also measures\r\nprogress by telling you how many words you have written so far and in\r\ntotal.\r\n\r\nhow can I use it?\r\n---\r\n\r\n1. Save the files you want to be tested to a single directory called `text`, using\r\n`.markdown`, `.txt` or `.md` extensions. That directory will also hold\r\nthe `words.dic` where you will save real words that are not included\r\nin the general dictionary. That's your personal dictionary, for short.\r\n\r\n2. Sign up for [Travis CI](http://travis-ci.org). You can use your\r\nGitHub account. Choose the repo where your text is and enable it.\r\n\r\n3. Create a `.travis.yml` configuration file in the home directory of\r\nyour repo. There are a couple of examples (English and Spanish) in\r\nthis repo. You can also copy and paste this\r\n\r\n```\r\nbranches:\r\n  except:\r\n    - gh-pages\r\nlanguage: perl\r\nperl:\r\n  - \"5.16\"\r\nbefore_install:\r\n  - sudo apt-get install libhunspell-1.3-0 libhunspell-dev\r\n  - curl https://raw.githubusercontent.com/JJ/Test-Text/master/files/just_check_en.t -o just_check.t\r\ninstall: cpanm Test::Text TAP::Harness\r\nscript: perl -MTAP::Harness -e 'use utf8; my $harness =\r\nTAP::Harness->new( { verbosity => 0} ); die \"FAIL\" if $harness->runtests( \"just_check.t\" )->failed;'\r\n```\r\n\r\nand save it to that file.\r\n\r\nThat's it. Every time you `push`, your text files will be checked and\r\nit will return the words that it does not know about. You can them fix\r\nthem or enter them in your `words.dic` file, with this format\r\n\r\n```\r\n3\r\nOneWord\r\nAnotherWord\r\nFooBar\r\n```\r\n\r\nSimple enough, ain't it?\r\n\r\nit does not work!\r\n---\r\n\r\nYou can raise [an issue](https://github.com/JJ/Test-Text/issues)\r\nrequesting help. \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}